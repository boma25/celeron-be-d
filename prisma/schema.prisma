// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//enums
enum ERole {
  ADMIN
  USER
}

enum EAdminType {
  SUPER_ADMIN
  ADMIN
}

enum EOrderStatus {
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELED
}

enum EMediaType {
  IMAGE
  VIDEO
}

enum ETransactionStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

model User {
  id           String        @id @unique @default(uuid())
  firstName    String
  lastName     String
  email        String        @unique
  password     String
  phoneNumber  String?       @unique
  countryCode  String?
  address      Address[]
  orders       Orders[]
  verified     Boolean       @default(false)
  transactions Transaction[]
  cart         Cart?
  role         ERole         @default(USER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Address {
  id        String   @id @unique @default(uuid())
  state     String
  country   String
  city      String
  zip       Int
  address   String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  orders    Orders[]
  default   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProducts {
  id        String   @id @unique @default(uuid())
  total     Float
  cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    String?
  order     Orders?  @relation(fields: [orderId], references: [id])
  orderId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Orders {
  id                   String          @id @unique @default(uuid())
  orderNumber          String
  status               EOrderStatus    @default(PROCESSING)
  User                 User            @relation(fields: [userId], references: [id])
  userId               String
  total                Float
  deliveryAddress      Address         @relation(fields: [addressId], references: [id])
  addressId            String
  trnasction           Transaction     @relation(fields: [transactionId], references: [id])
  transactionId        String          @unique()
  expectedDeliveryDate DateTime?
  products             OrderProducts[]
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
}

model Transaction {
  id          String             @id @unique @default(uuid())
  referenece  String
  description String
  order       Orders?
  status      ETransactionStatus @default(PENDING)
  User        User               @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Cart {
  id        String          @id @unique @default(uuid())
  total     Float           @default(0)
  User      User            @relation(fields: [userId], references: [id])
  userId    String          @unique()
  products  OrderProducts[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Brand {
  id        String    @id @unique @default(uuid())
  name      String
  Products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductCategory {
  id        String    @id @unique @default(uuid())
  category  String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id         String            @id @unique @default(uuid())
  brand      Brand             @relation(fields: [barndId], references: [id])
  barndId    String
  categories ProductCategory[]
  medias     ProductMedia[]
  name       String            @unique
  colors     Json
  sizes      Json
  quantity   Int
  price      Float
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model ProductMedia {
  id        String     @id @unique @default(uuid())
  mediaType EMediaType
  media_url String
  product   Product    @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Admin {
  id        String     @id @unique @default(uuid())
  adminType EAdminType @default(ADMIN)
  role      ERole      @default(ADMIN)
  email     String     @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
