// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//enums
enum ERole {
  ADMIN
  USER
}

enum EAdminType {
  SUPER_ADMIN
  ADMIN
  VIEWER
}

enum EOrderStatus {
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELED
}

enum EMediaType {
  IMAGE
  VIDEO
}

enum ETransactionStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

enum EVisibilityStatus {
  ACHIEVED
  DRAFT
  LIVE
  SCHEDULED
}

enum EProductState {
  ON_SALE
  COMMING_SOON
  OUT_OF_STOCK
}

model User {
  id                  String        @id @unique @default(uuid())
  firstName           String
  lastName            String
  email               String        @unique
  password            String
  phoneNumber         String?       @unique
  countryCode         String?
  address             Address[]
  orders              Order[]
  emailVerified       Boolean       @default(false)
  phoneNumberVerified Boolean       @default(false)
  transactions        Transaction[]
  cards               Card[]
  cart                Cart?
  role                ERole         @default(USER)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Address {
  id        String   @id @unique @default(uuid())
  state     String
  country   String
  city      String
  zip       String
  address   String   @unique
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  orders    Order[]
  default   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id        String   @id @unique @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  color     String?
  size      String?
  cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    String?
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                   String            @id @unique @default(uuid())
  orderNumber          Int               @unique
  status               EOrderStatus      @default(PROCESSING)
  User                 User              @relation(fields: [userId], references: [id])
  userId               String
  total                Float
  deliveryAddress      Address           @relation(fields: [addressId], references: [id])
  addressId            String
  transaction          Transaction       @relation(fields: [transactionId], references: [id])
  transactionId        String            @unique()
  expectedDeliveryDate DateTime?
  shippingFee          Int               @default(0)
  shipmentHistory      ShipmentHistory[]
  products             OrderProduct[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}

model Transaction {
  id          String             @id @unique @default(uuid())
  reference   String             @unique
  description String
  amount      Float
  order       Order?
  status      ETransactionStatus @default(PENDING)
  User        User               @relation(fields: [userId], references: [id])
  userId      String
  Card        Card?              @relation(fields: [cardId], references: [id])
  cardId      String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Cart {
  id        String         @id @unique @default(uuid())
  total     Float          @default(0)
  User      User           @relation(fields: [userId], references: [id])
  userId    String         @unique()
  products  OrderProduct[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Manufacturer {
  id        String    @id @unique @default(uuid())
  name      String
  products  Product[]
  models    Model[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Model {
  id             String       @id @unique @default(uuid())
  name           String
  products       Product[]
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
  years          Json
  manufacturerId String       @unique()
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model ProductCategory {
  id        String    @id @unique @default(uuid())
  category  String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id             String            @id @unique @default(uuid())
  manufacturer   Manufacturer?     @relation(fields: [manufacturerId], references: [id])
  manufacturerId String?
  model          Model?            @relation(fields: [modelId], references: [id])
  modelId        String?
  categories     ProductCategory[]
  medias         ProductMedia[]
  orderProduct   OrderProduct[]
  description    String            @db.VarChar(10000)
  name           String            @unique
  colors         Json?
  sizes          Json?
  year           String?
  quantity       Int
  price          Float
  configurable   Boolean           @default(false)
  state          EProductState?
  status         EVisibilityStatus @default(DRAFT)
  achieved       Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model ProductMedia {
  id        String     @id @unique @default(uuid())
  mediaType EMediaType
  media_url String
  product   Product    @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Admin {
  id         String     @id @unique @default(uuid())
  adminType  EAdminType @default(ADMIN)
  role       ERole      @default(ADMIN)
  email      String     @unique
  password   String
  firstName  String
  lastName   String
  lastActive DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Blog {
  id         String            @id @unique @default(uuid())
  coverImage String
  title      String            @unique
  content    String            @db.VarChar(10000)
  status     EVisibilityStatus @default(DRAFT)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Card {
  id                 String        @id @unique @default(uuid())
  account_name       String
  authorization_code String
  bin                String
  last4              String
  exp_month          String
  exp_year           String
  card_type          String
  bank               String
  country_code       String
  brand              String
  transactions       Transaction[]
  default            Boolean       @default(false)
  User               User          @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model ShipmentHistory {
  id          String   @id @unique @default(uuid())
  description String
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
